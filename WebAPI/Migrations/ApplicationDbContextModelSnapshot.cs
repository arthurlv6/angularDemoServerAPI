// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.Context.Entities;

namespace WebAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebAPI.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Department");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("JobTitle");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<DateTime?>("UpdateDatetime");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WebAPI.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("GST");

                    b.Property<string>("Industry");

                    b.Property<bool>("Initialized");

                    b.Property<string>("LastName");

                    b.Property<string>("Logo");

                    b.Property<string>("MobileNumber");

                    b.Property<string>("Name");

                    b.Property<string>("Note");

                    b.Property<string>("OfficePhone");

                    b.Property<string>("OrganisationType");

                    b.Property<string>("PostCode");

                    b.Property<string>("State");

                    b.Property<string>("Suburb");

                    b.Property<string>("Timezone");

                    b.Property<string>("TradingName");

                    b.Property<DateTime?>("ValidDate");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("WebAPI.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BlacklistId");

                    b.Property<string>("City");

                    b.Property<string>("Comment");

                    b.Property<string>("CompanyReferenceNo");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<decimal?>("Credit");

                    b.Property<string>("CustomerReference");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("Dob");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("HomePhone");

                    b.Property<string>("HouseNum");

                    b.Property<bool?>("IsInBlacklist");

                    b.Property<string>("LivePeriod");

                    b.Property<string>("MiddleName");

                    b.Property<string>("MobilePhone");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("NumOfDependant");

                    b.Property<string>("OtherName");

                    b.Property<string>("PostCode");

                    b.Property<string>("Remark");

                    b.Property<string>("ResidentalDetail");

                    b.Property<string>("SalesReferenceNo");

                    b.Property<int?>("SettingId");

                    b.Property<string>("StreetName");

                    b.Property<string>("Suburb");

                    b.Property<string>("SurName");

                    b.Property<string>("Title");

                    b.Property<decimal?>("TrustBalanceCl");

                    b.Property<decimal?>("TrustBalanceCp");

                    b.Property<int?>("UserId");

                    b.Property<string>("WorkPhone");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("WebAPI.Entities.NumberRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(50);

                    b.Property<int>("EndNumber");

                    b.Property<int>("LastNumber");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("NumberRangeCode")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(7);

                    b.Property<int>("StartNumber");

                    b.HasKey("Id");

                    b.ToTable("NumberRanges");
                });

            modelBuilder.Entity("WebAPI.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AccountFee");

                    b.Property<int?>("AgreeId");

                    b.Property<string>("BankInfo");

                    b.Property<decimal>("BookingFee");

                    b.Property<int?>("ChannelId");

                    b.Property<string>("CompleteStatus");

                    b.Property<DateTime?>("ContractSignDate");

                    b.Property<DateTime?>("CreateDate");

                    b.Property<string>("CustomerAddress");

                    b.Property<string>("CustomerEmail");

                    b.Property<int?>("CustomerId");

                    b.Property<string>("CustomerName");

                    b.Property<string>("CustomerPhone");

                    b.Property<string>("DebitFrequency");

                    b.Property<decimal?>("DebitPerAmount");

                    b.Property<DateTime?>("DebitStartDate");

                    b.Property<string>("DeliverComment");

                    b.Property<DateTime?>("DeliverDate");

                    b.Property<int?>("DeliveryAfterPayment");

                    b.Property<decimal>("DeliveryFee");

                    b.Property<int?>("DeliveryId");

                    b.Property<bool>("IsContract");

                    b.Property<string>("Note");

                    b.Property<decimal>("OthersFee");

                    b.Property<string>("RefType");

                    b.Property<int?>("SalesId");

                    b.Property<int>("SettingId");

                    b.Property<string>("Sid");

                    b.Property<string>("Status");

                    b.Property<int?>("UserId");

                    b.Property<int>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebAPI.Entities.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("BasicPrice");

                    b.Property<string>("Comment");

                    b.Property<long>("ContractId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<long?>("OrderId");

                    b.Property<decimal>("Price");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<string>("SeriesNumber");

                    b.Property<decimal?>("TaxRate");

                    b.Property<string>("Type");

                    b.Property<string>("Unit");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("WebAPI.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BarCode");

                    b.Property<decimal?>("BasicPrice");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("Paypal");

                    b.Property<decimal?>("PerPay");

                    b.Property<decimal>("Price");

                    b.Property<int?>("ProductCategoryId");

                    b.Property<string>("ProductCode");

                    b.Property<string>("Profile");

                    b.Property<decimal?>("RRP");

                    b.Property<string>("SeriesNumber");

                    b.Property<bool?>("ShowOn");

                    b.Property<int?>("ShowOrder");

                    b.Property<int?>("SupplierId");

                    b.Property<decimal?>("TotalValue");

                    b.Property<string>("Type");

                    b.Property<string>("Unit");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WebAPI.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.Property<int?>("ProductCategory2Id");

                    b.Property<int?>("ShowOrder");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategory2Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("WebAPI.Entities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ProductId");

                    b.Property<string>("Profile");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("WebAPI.Entities.ProductProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductProperties");
                });

            modelBuilder.Entity("WebAPI.Entities.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("CompleteStatus");

                    b.Property<string>("Country");

                    b.Property<DateTime?>("CreateDate");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<decimal?>("DeliveryFee");

                    b.Property<string>("DeliveryName");

                    b.Property<DateTime>("OrderDate");

                    b.Property<decimal?>("OtherFee");

                    b.Property<string>("PostCode");

                    b.Property<int?>("SUserId");

                    b.Property<int?>("SettingId");

                    b.Property<string>("State");

                    b.Property<string>("Status");

                    b.Property<string>("StreetAddress");

                    b.Property<string>("Suburb");

                    b.Property<int>("SupplierId");

                    b.Property<string>("SupplierName");

                    b.Property<string>("SupplierReference");

                    b.Property<int>("WareHouseId");

                    b.HasKey("Id");

                    b.HasIndex("WareHouseId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("WebAPI.Entities.PurchaseProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<decimal>("Price");

                    b.Property<string>("ProductDescription");

                    b.Property<int>("ProductId");

                    b.Property<string>("ProductName");

                    b.Property<int>("PurchaseId");

                    b.Property<decimal>("Quantity");

                    b.Property<decimal?>("TaxRate");

                    b.Property<string>("Unit");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseProducts");
                });

            modelBuilder.Entity("WebAPI.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankBranch");

                    b.Property<string>("BankName");

                    b.Property<string>("ContactDDINumber");

                    b.Property<string>("ContactEmail");

                    b.Property<string>("ContactFirstName");

                    b.Property<string>("ContactLastName");

                    b.Property<string>("ContactMobileNumber");

                    b.Property<string>("ContactOfficePhone");

                    b.Property<string>("ContactPhoneNumber");

                    b.Property<string>("ContactTollFreeNumber");

                    b.Property<string>("ContactWebsite");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("Deleted");

                    b.Property<string>("GSTNumber");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("Note");

                    b.Property<string>("PaymentTerm");

                    b.Property<string>("PhysicalCity");

                    b.Property<string>("PhysicalCountry");

                    b.Property<string>("PhysicalName");

                    b.Property<string>("PhysicalPostalCode");

                    b.Property<string>("PhysicalState");

                    b.Property<string>("PhysicalStreetAddress");

                    b.Property<string>("PhysicalSuburb");

                    b.Property<string>("Profile");

                    b.Property<string>("TaxRate");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("WebAPI.Entities.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("WebAPI.Entities.WarehouseAdjustment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ActualQuantity");

                    b.Property<DateTime>("OperationDate");

                    b.Property<int>("ProductId");

                    b.Property<decimal>("Quantity");

                    b.Property<string>("Reason");

                    b.Property<int>("SUserId");

                    b.Property<int>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseAdjustments");
                });

            modelBuilder.Entity("WebAPI.Entities.WarehouseInitialization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime>("OperationDate");

                    b.Property<int>("ProductId");

                    b.Property<decimal>("Quantity");

                    b.Property<int>("SUserId");

                    b.Property<int>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseInitializations");
                });

            modelBuilder.Entity("WebAPI.Entities.WarehousePrductRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Operation");

                    b.Property<DateTime>("OperationDate");

                    b.Property<int?>("OperationId");

                    b.Property<decimal>("Price");

                    b.Property<decimal>("Quantity");

                    b.Property<int>("SUserId");

                    b.Property<long>("WarehouseProductId");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseProductId");

                    b.ToTable("WarehousePrductRecords");
                });

            modelBuilder.Entity("WebAPI.Entities.WarehouseProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<decimal?>("High");

                    b.Property<decimal?>("Low");

                    b.Property<int>("ProductId");

                    b.Property<decimal>("Quantity");

                    b.Property<int>("WarehouseId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseProduct");
                });

            modelBuilder.Entity("WebAPI.Entities.WarehouseTransfer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FromId");

                    b.Property<DateTime>("OperationDate");

                    b.Property<int>("ToId");

                    b.HasKey("Id");

                    b.ToTable("WarehouseTransfers");
                });

            modelBuilder.Entity("WebAPI.Entities.WarehouseTransferDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<int>("ProductId");

                    b.Property<decimal>("Quantity");

                    b.Property<long>("WarehouseTransferId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseTransferId");

                    b.ToTable("WarehouseTransferDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebAPI.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebAPI.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebAPI.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebAPI.Entities.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebAPI.Entities.Order", b =>
                {
                    b.HasOne("WebAPI.Entities.Warehouse", "Warehouse")
                        .WithMany("Order")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebAPI.Entities.OrderProduct", b =>
                {
                    b.HasOne("WebAPI.Entities.Order", "Order")
                        .WithMany("ContractProduct")
                        .HasForeignKey("OrderId");

                    b.HasOne("WebAPI.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebAPI.Entities.Product", b =>
                {
                    b.HasOne("WebAPI.Entities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("WebAPI.Entities.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("WebAPI.Entities.ProductCategory", b =>
                {
                    b.HasOne("WebAPI.Entities.ProductCategory", "ProductCategory2")
                        .WithMany("ProductCategory1")
                        .HasForeignKey("ProductCategory2Id");
                });

            modelBuilder.Entity("WebAPI.Entities.ProductImage", b =>
                {
                    b.HasOne("WebAPI.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("WebAPI.Entities.ProductProperty", b =>
                {
                    b.HasOne("WebAPI.Entities.Product", "Product")
                        .WithMany("ProductProperties")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("WebAPI.Entities.Purchase", b =>
                {
                    b.HasOne("WebAPI.Entities.Warehouse", "WareHouse")
                        .WithMany("Purchase")
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebAPI.Entities.PurchaseProduct", b =>
                {
                    b.HasOne("WebAPI.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebAPI.Entities.Purchase", "Purchase")
                        .WithMany("PurchaseProduct")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebAPI.Entities.WarehouseAdjustment", b =>
                {
                    b.HasOne("WebAPI.Entities.Warehouse", "Warehouse")
                        .WithMany("WarehouseAdjustment")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebAPI.Entities.WarehouseInitialization", b =>
                {
                    b.HasOne("WebAPI.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebAPI.Entities.Warehouse", "Warehouse")
                        .WithMany("WarehouseInitialization")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebAPI.Entities.WarehousePrductRecord", b =>
                {
                    b.HasOne("WebAPI.Entities.WarehouseProduct", "WarehouseProduct")
                        .WithMany("WarehousePrductRecord")
                        .HasForeignKey("WarehouseProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebAPI.Entities.WarehouseProduct", b =>
                {
                    b.HasOne("WebAPI.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebAPI.Entities.Warehouse", "Warehouse")
                        .WithMany("WarehouseProduct")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebAPI.Entities.WarehouseTransferDetail", b =>
                {
                    b.HasOne("WebAPI.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebAPI.Entities.WarehouseTransfer", "WarehouseTransfer")
                        .WithMany("WarehouseTransferDetail")
                        .HasForeignKey("WarehouseTransferId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
